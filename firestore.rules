rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- FUNÇÕES AUXILIARES ---
    // Estas funções obtêm informações do documento do utilizador que faz a requisição.
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function getUserCompanyId() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId;
    }

    // --- REGRAS GERAIS ---

    // Coleção de Empresas (companies)
    match /companies/{companyId} {
      // Super-admin pode ler e escrever tudo.
      allow read, write: if getUserRole() == 'super-admin';

      // Qualquer utilizador autenticado pode obter os dados da sua própria empresa.
      allow get: if request.auth.uid != null && getUserCompanyId() == companyId;

      // Um admin de empresa pode ATUALIZAR o documento da sua própria empresa,
      // mas APENAS se a única alteração for no campo 'activatedFeatures'.
      // Isto permite que eles ativem/desativem funcionalidades sem poderem alterar
      // o nome da empresa, os módulos subscritos, etc.
      allow update: if getUserRole() == 'admin'
                    && getUserCompanyId() == companyId
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['activatedFeatures']);
    }

    // Coleção de Utilizadores (users)
    match /users/{userId} {
      // LEITURA: Um utilizador pode ler os seus próprios dados. Um super-admin pode ler tudo.
      // Um admin pode ler os dados de utilizadores da sua própria empresa.
      allow get: if request.auth.uid == userId
                  || getUserRole() == 'super-admin'
                  || (getUserRole() == 'admin' && getUserCompanyId() == get(/databases/$(database)/documents/users/$(userId)).data.companyId);

      // LISTAGEM: Apenas admins e super-admins podem listar utilizadores (a filtragem por empresa é feita no lado do cliente).
      allow list: if getUserRole() == 'admin' || getUserRole() == 'super-admin';

      // CRIAÇÃO: Um super-admin pode criar qualquer utilizador. Um admin só pode criar utilizadores para a sua própria empresa.
      allow create: if getUserRole() == 'super-admin'
                   || (getUserRole() == 'admin' && request.resource.data.companyId == getUserCompanyId());

      // ATUALIZAÇÃO: Um utilizador pode atualizar os seus próprios dados. Um super-admin pode atualizar tudo.
      // Um admin pode atualizar utilizadores da sua empresa, mas não pode promover ninguém a super-admin.
      allow update: if request.auth.uid == userId
                   || getUserRole() == 'super-admin'
                   || (getUserRole() == 'admin' && get(/databases/$(database)/documents/users/$(userId)).data.companyId == getUserCompanyId() && request.resource.data.role != 'super-admin');

      // EXCLUSÃO: É proibida para evitar a remoção acidental de registos de autenticação. A desativação é feita por 'update'.
      allow delete: if false;
    }

    // --- REGRAS PARA COLEÇÕES DE DADOS ESPECÍFICAS DA EMPRESA ---
    // A lógica é a mesma para todas:
    // - Super Admin pode fazer tudo.
    // - Utilizadores podem ler/escrever/apagar dados que pertencem à sua empresa.
    // - Utilizadores podem criar dados se o novo documento tiver o ID da sua empresa.
    function canAccessCompanyData(companyId) {
      return getUserRole() == 'super-admin' || getUserCompanyId() == companyId;
    }

    match /fazendas/{docId} {
      allow read, update, delete: if canAccessCompanyData(resource.data.companyId);
      allow create: if canAccessCompanyData(request.resource.data.companyId);
    }
    match /personnel/{docId} {
      allow read, update, delete: if canAccessCompanyData(resource.data.companyId);
      allow create: if canAccessCompanyData(request.resource.data.companyId);
    }
    match /registros/{docId} {
      allow read, update, delete: if canAccessCompanyData(resource.data.companyId);
      allow create: if canAccessCompanyData(request.resource.data.companyId);
    }
    match /perdas/{docId} {
      allow read, update, delete: if canAccessCompanyData(resource.data.companyId);
      allow create: if canAccessCompanyData(request.resource.data.companyId);
    }
    match /planos/{docId} {
      allow read, update, delete: if canAccessCompanyData(resource.data.companyId);
      allow create: if canAccessCompanyData(request.resource.data.companyId);
    }
    match /harvestPlans/{docId} {
      allow read, update, delete: if canAccessCompanyData(resource.data.companyId);
      allow create: if canAccessCompanyData(request.resource.data.companyId);
    }
    match /armadilhas/{docId} {
      allow read, update, delete: if canAccessCompanyData(resource.data.companyId);
      allow create: if canAccessCompanyData(request.resource.data.companyId);
    }
    match /cigarrinha/{docId} {
      allow read, update, delete: if canAccessCompanyData(resource.data.companyId);
      allow create: if canAccessCompanyData(request.resource.data.companyId);
    }
    match /config/{companyId} {
      allow read, write: if canAccessCompanyData(companyId);
    }
    match /userDrafts/{userId} {
      allow read, write: if request.auth.uid == userId;
    }
  }
}