# Generated by Django 5.2.5 on 2025-08-19 12:14

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Aeronave",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("prefixo", models.CharField(max_length=10, unique=True)),
                ("modelo", models.CharField(max_length=100)),
                (
                    "largura_faixa_aplicacao",
                    models.FloatField(
                        help_text="Largura da faixa de aplicação em metros."
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Produto",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nome", models.CharField(max_length=255, unique=True)),
                ("ingrediente_ativo", models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="Usuario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "firebase_uid",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Fazenda",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nome", models.CharField(max_length=255)),
                ("cidade", models.CharField(blank=True, max_length=255)),
                ("estado", models.CharField(blank=True, max_length=2)),
                (
                    "proprietario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fazendas",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrdemServico",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PLANEJADA", "Planejada"),
                            ("EM_EXECUCAO", "Em Execução"),
                            ("CONCLUIDA", "Concluída"),
                            ("CANCELADA", "Cancelada"),
                        ],
                        default="PLANEJADA",
                        max_length=20,
                    ),
                ),
                ("data_planejada", models.DateField()),
                ("piloto_responsavel", models.CharField(blank=True, max_length=255)),
                (
                    "dosagem_recomendada",
                    models.FloatField(
                        help_text="Dosagem do produto em litros por hectare (L/ha)."
                    ),
                ),
                (
                    "area_planejada_ha",
                    models.FloatField(
                        blank=True,
                        help_text="Área total planejada em hectares.",
                        null=True,
                    ),
                ),
                (
                    "volume_necessario_litros",
                    models.FloatField(
                        blank=True,
                        help_text="Volume de calda total necessário em litros.",
                        null=True,
                    ),
                ),
                (
                    "aeronave",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="core.aeronave"
                    ),
                ),
                (
                    "produto",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="core.produto"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Aplicacao",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "log_arquivo_url",
                    models.URLField(
                        help_text="URL para o arquivo de log bruto no serviço de armazenamento.",
                        max_length=500,
                    ),
                ),
                (
                    "geometria_voo",
                    django.contrib.gis.db.models.fields.LineStringField(
                        help_text="A rota exata do voo extraída do log.", srid=4326
                    ),
                ),
                (
                    "geometria_aplicada",
                    django.contrib.gis.db.models.fields.PolygonField(
                        help_text="O polígono da área efetivamente aplicada (rota + largura da faixa).",
                        srid=4326,
                    ),
                ),
                (
                    "area_correta_ha",
                    models.FloatField(
                        blank=True,
                        help_text="Área aplicada dentro do alvo (ha).",
                        null=True,
                    ),
                ),
                (
                    "area_desperdicio_ha",
                    models.FloatField(
                        blank=True,
                        help_text="Área aplicada fora do alvo (ha).",
                        null=True,
                    ),
                ),
                (
                    "area_falha_ha",
                    models.FloatField(
                        blank=True,
                        help_text="Área do alvo não coberta (ha).",
                        null=True,
                    ),
                ),
                (
                    "area_sobreposicao_ha",
                    models.FloatField(
                        blank=True,
                        help_text="Área de sobreposição interna (ha).",
                        null=True,
                    ),
                ),
                (
                    "ordem_servico",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="aplicacao",
                        to="core.ordemservico",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Talhao",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nome", models.CharField(max_length=255)),
                (
                    "geometria",
                    django.contrib.gis.db.models.fields.PolygonField(srid=4326),
                ),
                ("cultura_plantada", models.CharField(blank=True, max_length=100)),
                (
                    "fazenda",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="talhoes",
                        to="core.fazenda",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="ordemservico",
            name="talhoes",
            field=models.ManyToManyField(
                related_name="ordens_servico", to="core.talhao"
            ),
        ),
    ]
